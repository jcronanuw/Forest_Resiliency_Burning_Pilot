setwd("C:/Users/jcronan/Documents/GitHub/Forest_Resiliency_Burning_Pilot")
#Open file with tree species metadata:
consumption <- read.table("wad_20170730_FOFEMOutputs.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with tree species metadata:
fofem <- read.table("wad_20170730_FOFEM_outputs.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
head(fofem)
head(tpas_ordered_condensed)
#PURPOSE OF THIS SCRIPT IS TO CREATE INPUTS FOR FOFEM FROM OVERSTORY DATA COLLECTED
#AS PART OF THE WASHINGTON DEPARTMENT OF NATURAL RESOURCES FOREST RESILIENCY BURNING
#PILOT PROJECT
#DATA WILL BE USED FOR THE SPRING 2017 REPORT
#SCRIPT IS ADAPTED FROM CODE USED TO CACLULATE OVERSTORY CHARACTERISTICS IN FALL 2016.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(plyr)
library(data.table)
#Open file with tree species metadata:
species_lut <- read.table("C:/usfs_wad_data_csv/spring2017/wad2017_species_lut.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with site metadata:
site_lut <- read.table("C:/usfs_wad_data_csv/spring2017/wad2017_site_lut.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with sampling episode metadata:
episode_lut <- read.table("C:/usfs_wad_data_csv/SPRING2017/wad2017_episode_lut.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with plot metadata:
plot_lut <- read.table("C:/usfs_wad_data_csv/spring2017/wad2017_plot_lut.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with stem count data:
stems <- read.table("C:/usfs_wad_data_csv/spring2017/wad2017_stems.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with overstory data:
trees <- read.table("C:/usfs_wad_data_csv/spring2017/wad2017_trees.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Open file with plot radius data:
radius <- read.table("C:/usfs_wad_data_csv/wad_plot_radius.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Remove Notes column
radius <- radius[,-9]
#Calculate area of the circle for each plot
radius_area_meters <- radius[,3:7]^2 * 3.14159265359
#Convert square meters into acres
radius_area_acres <- radius_area_meters * 0.000247105 #(number of acres per square meter)
#Conversion factor (multiply number of trees per plot by this to get density per acre)
expansion_factor <- round(1/radius_area_acres,3)
expansion_factor <- data.frame(unitName = radius[,1],
unitID = radius[,2],
expansion_factor)
#List site names that burned.
unitName_burned <- c("Sherman Creek", "Paradise 90", "Hanlon", "Orion 2",
"Angel", "25 Mile", "Chumstick ZUI", "8 Mile Bottom",
"Canteen", "Goat", "Natapoc 35", "Oak Creek",
"Upper Rendezvous 1", "Vulcan")
#unitName_burned <- c("Sherman Creek", "Paradise 90", "Hanlon", "Orion 2",
#                     "Angel", "25 Mile", "Chumstick ZUI")
#Isolate unit ID numbers for sites that burned
unitID_burned <- site_lut$unitID[site_lut$unitName %in% unitName_burned]
unitID_burned <- sort(unitID_burned)
unitName_burned <- site_lut[site_lut$unitID %in% unitID_burned, c(2,4)]
#Number of burned units
bux <- length(unitID_burned)
#Isolate sampling episode IDs for pre-fire episodes of sites that were burned.
pre_seID_burned_sites <- episode_lut$unitSamplingEpisodeID[episode_lut$unitID %in% unitID_burned &
episode_lut$samplingEpisodeTypeID == 1]
#Remove the "notes" column
trees <- trees[,-11]
#Isolate entries from pre-fire sampling of burned sites
all_trees_burned <- trees[trees$unitSamplingEpisodeID %in% pre_seID_burned_sites,]
###################################################################################################################
###################################################################################################################
#Add column to data showing expansion factor
unitID_burned_individual <- mapply(function(y)
{
unitID_burned[pre_seID_burned_sites == all_trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(all_trees_burned[,1]))
#Create a relational table for DBH ranges for nested plot radius
DBH_classes_plot_radius <- data.frame(dbh_class = c(1,2,3), lower_dbh = c(0,3,24),
upper_dbh = c(2.9, 23.9, 39.9))
#Create a relational table to apply expansions factor.
trees_expansion_factor <- mapply(function(y)
{
expansion_factor[which(expansion_factor$unitID == unitID_burned_individual[y]),
4 + DBH_classes_plot_radius$dbh_class[all_trees_burned$dbh_in[y] >=
DBH_classes_plot_radius$lower_dbh &
all_trees_burned$dbh_in[y] <=
DBH_classes_plot_radius$upper_dbh]]
}, 1:length(all_trees_burned[,1]))
#Determine the number of plots per site
n_plots <- mapply(function(y)
{
length(unique(all_trees_burned$plotID[all_trees_burned$unitSamplingEpisodeID == y]))
}, pre_seID_burned_sites)
n_plots_individual <- mapply(function(y)
{
n_plots[pre_seID_burned_sites == all_trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(all_trees_burned[,1]))
#Add this to all_trees_burned
all_trees_burned <- data.frame(unitID = unitID_burned_individual, all_trees_burned,
expansionFactor = trees_expansion_factor,
n = n_plots_individual)
#Convert all NA values for min and max bole char to zero
#Procedure for data entry was to leave these field blank if tree was not affected by
#fire, but in regards to calculating average bole char they need to have a value of zero.
#It would probably be best to verify that these NAs are indeed trees unaffected by fire
#for each row, but there is no time to do this.
#Quick way to ID errors, look for entries where one field is numeric and one is NA,
#this should not occur under the data entry procdures.
#all_trees_burned[is.na(all_trees_burned$minBoleChar) == T,]
#all_trees_burned[is.na(all_trees_burned$maxBoleChar) == T,]
#Checked, this scenario does not occur
all_trees_burned$minBoleChar_ft[is.na(all_trees_burned$minBoleChar_ft) == T] <- 0
all_trees_burned$maxBoleChar_ft[is.na(all_trees_burned$maxBoleChar_ft) == T] <- 0
#Check again:
#trees_burned[is.na(trees_burned$minBoleChar) == T,]
#trees_burned[is.na(trees_burned$maxBoleChar) == T,]
#No NAs, problem resolved.
#Subset all live trees in burned units
live_trees_burned <- all_trees_burned[all_trees_burned$statusID == 1,]
#Calculate C/R for each tree
CR <- round((((1-(live_trees_burned$htlc_ft/live_trees_burned$ht_ft))*100)/10),2)
live_trees_burned <- data.frame(live_trees_burned, CR = CR)
#Look at how tree counts are distributed by species.
tree_dist_by_species <- vector()
for(i in 1:length(unique(live_trees_burned$speciesID)))
{
tree_dist_by_species[i] <- length(live_trees_burned[,1][
live_trees_burned$speciesID == sort(unique(live_trees_burned$speciesID))[i]])
}
#Show table of tree counts by species
#data.frame(speciesID = sort(unique(live_trees_burned$speciesID)),
#           Name = mapply(function(y)
#             {
#             species_lut$commonName[species_lut$speciesID == y]},
#             sort(unique(live_trees_burned$speciesID))),
#           Count = tree_dist_by_species)
#Exclude hardwood species. Many of these are considered large shrubs.
#Even bigleaf maple grew as a large shrub where it occurred on Chumstick ZUI.
#Conifer species ID codes
conifer_speciesID <- c(858, 917, 936, 1029, 1030)
live_conifers_burned <- live_trees_burned[live_trees_burned$speciesID %in% conifer_speciesID,]
#Number of trees surveyed vs, number analyzed in this script
i1 <- paste("Total number of trees surveyed: ", length(trees[,1]), sep = "")
i2 <- paste("Total number of trees surveyed at seven burned sites: ", length(all_trees_burned[,1]), sep = "")
i3 <- paste("Total number of live trees surveyed at seven burned sites: ", length(live_trees_burned[,1]), sep = "")
i4 <- paste("Total number of conifers surveyed at seven burned sites: ", length(live_conifers_burned[,1]), sep = "")
ix <- data.frame(TreeCount = c(i1, i2, i3, i4))
ix
abgr <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[1],]
laoc <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[3],]
pico <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[4],]
pipo <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[7],]
psme <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[8],]
#What is the maximum DBH (so I can figure out DBH classes)
max(live_conifers_burned$dbh_in)#38.3
#largest class will be 35-40 inches
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#WHAT DATA SUBSET WOULD YOU LIKE TO ANALYZE
#all_trees_burned: all individuals sampled in overstory plots. Includes hardwoods > 4.5 ft tall and dead trees.
#live_trees_burned: all live individuals sampled in overstory plots. Includes hardwoods > 4.5 ft tall.
#live_conifers_burned: all conifers sampled in overstory plots.
#abgr: all grand fir trees (> 4.5 ft tall) sampled in overstory plots
#laoc: all western larch trees (> 4.5 ft tall) sampled in overstory plots
#pico: all lodgepole pine trees (> 4.5 ft tall) sampled in overstory plots
#pipo: all ponderosa pine trees (> 4.5 ft tall) sampled in overstory plots
#psme: all Douglas-fir trees (> 4.5 ft tall) sampled in overstory plots
trees_burned <- live_conifers_burned
#Add column to data showing expansion factor
unitID_burned_individual <- mapply(function(y)
{
unitID_burned[pre_seID_burned_sites == trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(trees_burned[,1]))
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Intermittant step. Run this no matter what you want to analyze.
#Figure out try TPA by 5 inch DBH classes from 0-5 to 35-40.
#Create data frame to accept tree count data by plot for each site
tree_density_template <- data.frame(plot_lut[plot_lut$unitID %in% unitID_burned &
plot_lut$plotID %in% sort(unique(trees_burned$plotID)),])
###
#0-4.9 inch DBH class
#Subset trees, need to do this twice because DBH class straddles
#nested plot cutoff.
#For 0-2.9"
trees_burned_0_2.9 <- trees_burned[trees_burned$dbh_in < 3,]
#For 3.0-4.9"
trees_burned_3.0_4.9 <- trees_burned[trees_burned$dbh_in >= 3 &
trees_burned$dbh_in <= 4.9,]
#Count the number of trees in each plot
#For 0-2.9"
trees_burned_0_2.9_count <- mapply(function(y) {
length(trees_burned_0_2.9$treeID[trees_burned_0_2.9$plotID == y])
}, tree_density_template$plotID)
#For 3.0-4.9"
trees_burned_3.0_4.9_count <- mapply(function(y) {
length(trees_burned_3.0_4.9$treeID[trees_burned_3.0_4.9$plotID == y])
}, tree_density_template$plotID)
###
#5.0-9.9 inch DBH class
#Subset trees.
trees_burned_5.0_9.9 <- trees_burned[trees_burned$dbh_in >= 5 &
trees_burned$dbh_in <= 9.9,]
#Count the number of trees in each plot
#For 5.0-9.9"
trees_burned_5.0_9.9_count <- mapply(function(y) {
length(trees_burned_5.0_9.9$treeID[trees_burned_5.0_9.9$plotID == y])
}, tree_density_template$plotID)
###
#10.0-14.9 inch DBH class
#Subset trees.
trees_burned_10.0_14.9 <- trees_burned[trees_burned$dbh_in >= 10 &
trees_burned$dbh_in <= 14.9,]
#Count the number of trees in each plot
trees_burned_10.0_14.9_count <- mapply(function(y) {
length(trees_burned_10.0_14.9$treeID[trees_burned_10.0_14.9$plotID == y])
}, tree_density_template$plotID)
###
#15.0-19.9 inch DBH class
#Subset trees.
trees_burned_15.0_19.9 <- trees_burned[trees_burned$dbh_in >= 15 &
trees_burned$dbh_in <= 19.9,]
#Count the number of trees in each plot
trees_burned_15.0_19.9_count <- mapply(function(y) {
length(trees_burned_15.0_19.9$treeID[trees_burned_15.0_19.9$plotID == y])
}, tree_density_template$plotID)
###
#20.0-24.9 inch DBH class
#Subset trees.
trees_burned_20.0_23.9 <- trees_burned[trees_burned$dbh_in >= 20 &
trees_burned$dbh_in <= 23.9,]
trees_burned_24.0_24.9 <- trees_burned[trees_burned$dbh_in >= 24 &
trees_burned$dbh_in <= 24.9,]
#Count the number of trees in each plot
trees_burned_20.0_23.9_count <- mapply(function(y) {
length(trees_burned_20.0_23.9$treeID[trees_burned_20.0_23.9$plotID == y])
}, tree_density_template$plotID)
trees_burned_24.0_24.9_count <- mapply(function(y) {
length(trees_burned_24.0_24.9$treeID[trees_burned_24.0_24.9$plotID == y])
}, tree_density_template$plotID)
###
#25.0-29.9 inch DBH class
#Subset trees.
trees_burned_25.0_29.9 <- trees_burned[trees_burned$dbh_in >= 25 &
trees_burned$dbh_in <= 29.9,]
#Count the number of trees in each plot
trees_burned_25.0_29.9_count <- mapply(function(y) {
length(trees_burned_25.0_29.9$treeID[trees_burned_25.0_29.9$plotID == y])
}, tree_density_template$plotID)
###
#30.0-34.9 inch DBH class
#Subset trees.
trees_burned_30.0_34.9 <- trees_burned[trees_burned$dbh_in >= 30 &
trees_burned$dbh_in <= 34.9,]
#Count the number of trees in each plot
trees_burned_30.0_34.9_count <- mapply(function(y) {
length(trees_burned_30.0_34.9$treeID[trees_burned_30.0_34.9$plotID == y])
}, tree_density_template$plotID)
###
#35.0-39.9 inch DBH class
#Subset trees.
trees_burned_35.0_39.9 <- trees_burned[trees_burned$dbh_in >= 35 &
trees_burned$dbh_in <= 39.9,]
#Count the number of trees in each plot
trees_burned_35.0_39.9_count <- mapply(function(y) {
length(trees_burned_35.0_39.9$treeID[trees_burned_35.0_39.9$plotID == y])
}, tree_density_template$plotID)
#Combine tree count data into a single data frame.
tree_count_plot <- data.frame(tree_density_template,
count_0_2.9 = trees_burned_0_2.9_count,
count_3.0_4.9 = trees_burned_3.0_4.9_count,
count_5.0_9.9 = trees_burned_5.0_9.9_count,
count_10.0_14.9 = trees_burned_10.0_14.9_count,
count_15.0_19.9 = trees_burned_15.0_19.9_count,
count_20.0_23.9 = trees_burned_20.0_23.9_count,
count_24.0_24.9 = trees_burned_24.0_24.9_count,
count_25.0_29.9 = trees_burned_25.0_29.9_count,
count_30.0_34.9 = trees_burned_30.0_34.9_count,
count_35.0_39.9 = trees_burned_35.0_39.9_count)
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#NEXT STEPS CALCULATE SITE-LEVEL VARIABLES
#DATA IS REPORTED FOR ALL TREES
#I.E. OVERSTORY IS NOT STRATIFIED BY DBH CLASS OR OVERSTORY POSITION
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Calculate TPA by site
#Condense tree count data to nested plot dimensions
tree_count_plot_3.0_23.9 <- tree_count_plot[,6] + tree_count_plot[,7] +
tree_count_plot[,8] + tree_count_plot[,9] + tree_count_plot[,10]
tree_count_plot_24.0_39.9 <- tree_count_plot[,11] + tree_count_plot[,12] +
tree_count_plot[,13] + tree_count_plot[,14]
tree_count_plot_condensed <- data.frame(tree_count_plot[,1:5],
count_3.0_23.9 = tree_count_plot_3.0_23.9,
count_24.0_39.9 = tree_count_plot_24.0_39.9)
#Create a table that reference columns in the density conversion factor table.
conversion_factors_col_reference <- c(5, 6, 7)
#Apply conversion factors to calculate TPA for each plot and diameter class
tree_TPA_plot_condensed <- mapply(function(x)
{
mapply(function(y)
{
tree_count_plot_condensed[y,4+x] *
(expansion_factor[,conversion_factors_col_reference[x]][
expansion_factor$unitID == tree_count_plot_condensed$unitID[y]])
}, 1:length(tree_count_plot_condensed$unitID))
}, 1:length(conversion_factors_col_reference))
#Create a new data frame
tree_TPA_plot_condensed_df <- data.frame(tree_count_plot_condensed[,1:4], tree_TPA_plot_condensed)
#The convert data frame into a data table. Note sure why, but I can't convert
#tree_count_plot object directly to a data table.
tree_TPA_plot_condensed_dt <- data.table(tree_TPA_plot_condensed_df)
#Create a vector listing column names.
tree_cols_condensed <- c("X1","X2","X3")
#Summarize data by site
tree_TPA_site_mean_condensed <- tree_TPA_plot_condensed_dt[, lapply(.SD, mean, na.rm=TRUE), by=unitID, .SDcols=tree_cols_condensed]
tree_TPA_site_sd_condensed <- tree_TPA_plot_condensed_dt[, lapply(.SD, sd, na.rm=TRUE), by=unitID, .SDcols=tree_cols_condensed]
tree_TPA_site_mean_condensed <- as.data.frame(tree_TPA_site_mean_condensed)
tree_TPA_site_sd_condensed <- as.data.frame(tree_TPA_site_sd_condensed)
tree_TPA_site_mean_condensed[,2:4] <- round(tree_TPA_site_mean_condensed[,2:4],0)
tree_TPA_site_sd_condensed[,2:4] <- round(tree_TPA_site_sd_condensed[,2:4],0)
#Create column names
tree_TPA_dbhClass_condensed <- c("mean_0_2.9", "sd_0_2.9",
"mean_3.0_23.9", "sd_3.0_23.9",
"mean_24.0_39.9", "sd_24.0_39.9")
#Combine means and sds
tpas_condensed <- cbind(as.data.frame(tree_TPA_site_mean_condensed), as.data.frame(tree_TPA_site_sd_condensed)[,-1])
#Re-order means and sds so they are adjacent for each DBH class
tpas_ordered_condensed <- cbind(tpas_condensed[,1:2], tpas_condensed[,5],tpas_condensed[,3],
tpas_condensed[,6],tpas_condensed[,4],tpas_condensed[,7])
#Add column names
colnames(tpas_ordered_condensed) <- c("unitID", tree_TPA_dbhClass_condensed)
#Add site names
siteNames_TPA <- mapply(function(y)
{
site_lut$unitName[site_lut$unitID == y]
}, tpas_ordered_condensed$unitID)
#Add site names
tree_TPAS_site_condensed <- data.frame(siteName = siteNames_TPA,
as.data.frame(tpas_ordered_condensed))
tpa <- data.frame(tree_TPAS_site_condensed,
Total_sapling = tree_TPAS_site_condensed[,3],
Total_trees = (tree_TPAS_site_condensed[,5] +
tree_TPAS_site_condensed[,7]),
Total_all = (tree_TPAS_site_condensed[,3] +
tree_TPAS_site_condensed[,5] +
tree_TPAS_site_condensed[,7]))
head(tpas_ordered_condensed)
tpas_ordered_condensed
site_lut
#PURPOSE OF THIS SCRIPT IS TO SUMMARIZE LOADING AND CONSUMPTION RESULTS FOR TEXT IN JULY 30, 2017 REPORT.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(plyr)
library(data.table)
setwd("C:/Users/jcronan/Documents/GitHub/Forest_Resiliency_Burning_Pilot")
#Open file with tree species metadata:
consumption <- read.table("wad_20170727_AppendixA.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Changle column names to something shorter. Easier to write script.
colnames(consumption) <- c("site", "cat", "pre", "post", "consume", "percent", "fm2", "fm4",
"fall_2", "fall_4", "spring_2", "spring_4")
###########
#IMPUTE DUFF DATA INTO NATAPOC AND VULCAN FROM UNIT WITH CLOSEST MATCHING LITTER VALUE
#Seperate total loading from loading by fuel strata.
#litter_all_a <- consumption[consumption$cat == "litter",]
#litter_all_a[order(litter_all_a$pre),]
#Vulcan litter loading is between Hanlon and Paradise 90; use an average of these two values.
#Natapoc litter loading is between UR-1 and Sherman Creek; use an average of these two values.
#duff_all_a <- consumption[consumption$cat == "duff",]
#duff_all_a[order(duff_all_a$pre),]
#mean(c(14.27,29.71))#imputed duff loading for Vulcan
#mean(c(26.45,13.90))#imputed duff loading for Natapoc
#Create a table without total surface fuel loading category.
by_cat <- consumption[consumption$cat != "Total",]
#Sum loading for each category
preLoad_summary <- ddply(by_cat, "cat", summarise,
sum = sum(pre, na.rm = T),
count = length(pre[!is.na(pre)]))
#Calculate the total fuel loading of all sites combined.
total <- sum(preLoad_summary$sum)
#calculate the percent contribution for total fuel loading for each fuel strata/
fractional_contribution <- round((preLoad_summary$sum/total)*100,2)
#Show the percent contribution for each fuel strata
data.frame(cat = preLoad_summary$cat, percent = fractional_contribution)
#Check totals
sum(fractional_contribution)
#############
#TOTAL LOADING
#Seperate total loading from loading by fuel strata.
total_burned_a <- consumption[consumption$cat == "Total",]
#Calculate the percent deviation from measured value for each Consume run
perc_fm_2 <- -1*round((((total_burned_a$consume-total_burned_a$fm2)/total_burned_a$consume)*100),0)
perc_fm_4 <- -1*round((((total_burned_a$consume-total_burned_a$fm4)/total_burned_a$consume)*100),0)
#Calculate the percent of total pre-fire fuels predicted to consume
perc_fall_2 <- round(((total_burned_a$fall_2/total_burned_a$pre)*100),0)
perc_fall_4 <- round(((total_burned_a$fall_4/total_burned_a$pre)*100),0)
perc_spring_2 <- round(((total_burned_a$spring_2/total_burned_a$pre)*100),0)
perc_spring_4 <- round(((total_burned_a$spring_4/total_burned_a$pre)*100),0)
total_burned_b <- data.frame(total_burned_a, perc_fm_2, perc_fm_4, perc_fall_2, perc_fall_4, perc_spring_2, perc_spring_4)
total_burned_c <- total_burned_b[total_burned_b$site %in% c("Angel", "Chumstick", "Orion",
"Paradise 90", "Sherman Creek", "Mile25"),c(1,2,3,4,5,6,7,8,13,14)]
#This will show loading, measured consumption, predicted consumption, percent differences for burned units.
total_burned_c
mean(c(36, 26, 18, 22, 34, 37))#mean of difference between measured and predicted for Consume v. 2.1
mean(c(26, 16, 17, 45, 24, 11))#mean of difference between measured and predicted for Consume v. 4.2
total_burned_d <- total_burned_b[,c(1,2,3,9,10,11,12,15,16,17,18)]
range(total_burned_d$perc_fall_2)
range(total_burned_d$perc_fall_4)
range(total_burned_d$perc_spring_2)
range(total_burned_d$perc_spring_4)
#############
#DUFF LOADING
#Seperate total loading from loading by fuel strata.
duff_burned_a <- consumption[consumption$cat == "duff",]
#Calculate the percent deviation from measured value for each Consume run
perc_fm_2 <- -1*round((((duff_burned_a$consume-duff_burned_a$fm2)/duff_burned_a$consume)*100),0)
perc_fm_4 <- -1*round((((duff_burned_a$consume-duff_burned_a$fm4)/duff_burned_a$consume)*100),0)
perc_fall_2 <- -1*round((((duff_burned_a$consume-duff_burned_a$fall_2)/duff_burned_a$consume)*100),0)
perc_fall_4 <- -1*round((((duff_burned_a$consume-duff_burned_a$fall_4)/duff_burned_a$consume)*100),0)
perc_spring_2 <- -1*round((((duff_burned_a$consume-duff_burned_a$spring_2)/duff_burned_a$consume)*100),0)
perc_spring_4 <- -1*round((((duff_burned_a$consume-duff_burned_a$spring_4)/duff_burned_a$consume)*100),0)
duff_burned_b <- data.frame(duff_burned_a, perc_fm_2, perc_fm_4, perc_fall_2, perc_fall_4, perc_spring_2, perc_spring_4)
duff_burned_c <- duff_burned_b[duff_burned_b$site %in% c("Angel", "Chumstick", "Orion",
"Paradise 90", "Sherman Creek", "Mile25"),c(1,2,3,4,5,6,7,8,13,14)]
#This will show duff loading, measured consumption, predicted consumption, percent differences for burned units.
duff_burned_c
mean(18, 41, 21, 17, 35, 169)#mean of difference between measured and predicted for Consume v. 2.1
mean(44, 45, 46, 62, 100, 100)#mean of difference between measured and predicted for Consume v. 4.2
#Subset data by category (i.e. exclude totals) and order data frame by sites.
cats_a <- consumption[consumption$cat != "Total",]
cats_b <- cats_a[order(cats_a$site),]
#Calculate actual total loadings (exclude imputed duff loading for Vulcan and Natapoc)
TotalLoading <- ddply(cats_b, "site", summarise,
total = sum(pre, na.rm = T))
total <- expand.grid(1:length(unique(cats_b$cat)), TotalLoading$total)[2]
cats_c <- data.frame(cats_b, total = total)
#Calculate percentage of total consumption for each fuel strata for spring and fall scenarion predictions.
TotalPredConsumption_xCat <- ddply(cats_c, "cat", summarise,
pre = sum(pre),
fall_2 = sum(fall_2),
fall_4 = sum(fall_4),
spring_2 = sum(spring_2),
spring_4 = sum(spring_4))
TotalPredConsumption <- ddply(total_burned_a, "cat", summarise,
pre = sum(pre),
fall_2 = sum(fall_2),
fall_4 = sum(fall_4),
spring_2 = sum(spring_2),
spring_4 = sum(spring_4))
by_cat <- TotalPredConsumption_xCat[,3:6]
by_cat <- as.matrix(by_cat,9,4)
by_total <- as.numeric(TotalPredConsumption[,3:6])
bta <- expand.grid(1:9, by_total)[2]
btb <- as.numeric(bta$Var2)
btc <- matrix(btb, 9,4)
TotalPredCons_PercentOfTotal_a <- round((by_cat/btc)*100,2)
colnames(TotalPredCons_PercentOfTotal_a) <- c("fall_2", "fall_4", "spring_2", "spring_4")
TotalPredCons_PercentOfTotal_b <- data.frame(cat = TotalPredConsumption_xCat$cat, TotalPredCons_PercentOfTotal_a)
sum(TotalPredCons_PercentOfTotal_b$fall_2)
sum(TotalPredCons_PercentOfTotal_b$fall_4)
sum(TotalPredCons_PercentOfTotal_b$spring_2)
sum(TotalPredCons_PercentOfTotal_b$spring_4)
TotalPredConsumption
duff_burned_c
duff_burned_b
total_burned_b
range(total_burned_b$perc_fall_2)
range(total_burned_b$perc_fall_4)
range(total_burned_b$perc_spring_2)
range(total_burned_b$perc_spring_4)
duff_burned_b
duff_burned_b$consume/total_burned_b$consume
