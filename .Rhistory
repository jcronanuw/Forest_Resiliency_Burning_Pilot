unitID_burned_individual <- mapply(function(y)
{
unitID_burned[pre_seID_burned_sites == all_trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(all_trees_burned[,1]))
#Create a relational table for DBH ranges for nested plot radius
DBH_classes_plot_radius <- data.frame(dbh_class = c(1,2,3), lower_dbh = c(0,3,24),
upper_dbh = c(2.9, 23.9, 39.9))
#Create a relational table to apply expansions factor.
trees_expansion_factor <- mapply(function(y)
{
expansion_factor[which(expansion_factor$unitID == unitID_burned_individual[y]),
4 + DBH_classes_plot_radius$dbh_class[all_trees_burned$dbh_in[y] >=
DBH_classes_plot_radius$lower_dbh &
all_trees_burned$dbh_in[y] <=
DBH_classes_plot_radius$upper_dbh]]
}, 1:length(all_trees_burned[,1]))
#Determine the number of plots per site
n_plots <- mapply(function(y)
{
length(unique(all_trees_burned$plotID[all_trees_burned$unitSamplingEpisodeID == y]))
}, pre_seID_burned_sites)
n_plots_individual <- mapply(function(y)
{
n_plots[pre_seID_burned_sites == all_trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(all_trees_burned[,1]))
#Add this to all_trees_burned
all_trees_burned <- data.frame(unitID = unitID_burned_individual, all_trees_burned,
expansionFactor = trees_expansion_factor,
n = n_plots_individual)
#Convert all NA values for min and max bole char to zero
#Procedure for data entry was to leave these field blank if tree was not affected by
#fire, but in regards to calculating average bole char they need to have a value of zero.
#It would probably be best to verify that these NAs are indeed trees unaffected by fire
#for each row, but there is no time to do this.
#Quick way to ID errors, look for entries where one field is numeric and one is NA,
#this should not occur under the data entry procdures.
#all_trees_burned[is.na(all_trees_burned$minBoleChar) == T,]
#all_trees_burned[is.na(all_trees_burned$maxBoleChar) == T,]
#Checked, this scenario does not occur
all_trees_burned$minBoleChar_ft[is.na(all_trees_burned$minBoleChar_ft) == T] <- 0
all_trees_burned$maxBoleChar_ft[is.na(all_trees_burned$maxBoleChar_ft) == T] <- 0
#Check again:
#trees_burned[is.na(trees_burned$minBoleChar) == T,]
#trees_burned[is.na(trees_burned$maxBoleChar) == T,]
#No NAs, problem resolved.
#Subset all live trees in burned units
live_trees_burned <- all_trees_burned[all_trees_burned$statusID == 1,]
#Calculate C/R for each tree
CR <- round((((1-(live_trees_burned$htlc_ft/live_trees_burned$ht_ft))*100)/10),2)
live_trees_burned <- data.frame(live_trees_burned, CR = CR)
#Look at how tree counts are distributed by species.
tree_dist_by_species <- vector()
for(i in 1:length(unique(live_trees_burned$speciesID)))
{
tree_dist_by_species[i] <- length(live_trees_burned[,1][
live_trees_burned$speciesID == sort(unique(live_trees_burned$speciesID))[i]])
}
#Show table of tree counts by species
#data.frame(speciesID = sort(unique(live_trees_burned$speciesID)),
#           Name = mapply(function(y)
#             {
#             species_lut$commonName[species_lut$speciesID == y]},
#             sort(unique(live_trees_burned$speciesID))),
#           Count = tree_dist_by_species)
#Exclude hardwood species. Many of these are considered large shrubs.
#Even bigleaf maple grew as a large shrub where it occurred on Chumstick ZUI.
#Conifer species ID codes
conifer_speciesID <- c(858, 917, 936, 1029, 1030)
live_conifers_burned <- live_trees_burned[live_trees_burned$speciesID %in% conifer_speciesID,]
#Number of trees surveyed vs, number analyzed in this script
i1 <- paste("Total number of trees surveyed: ", length(trees[,1]), sep = "")
i2 <- paste("Total number of trees surveyed at seven burned sites: ", length(all_trees_burned[,1]), sep = "")
i3 <- paste("Total number of live trees surveyed at seven burned sites: ", length(live_trees_burned[,1]), sep = "")
i4 <- paste("Total number of conifers surveyed at seven burned sites: ", length(live_conifers_burned[,1]), sep = "")
ix <- data.frame(TreeCount = c(i1, i2, i3, i4))
ix
abgr <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[1],]
laoc <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[3],]
pico <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[4],]
pipo <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[6],]
psme <- live_conifers_burned[live_conifers_burned$speciesID == sort(unique(live_trees_burned$speciesID))[7],]
#What is the maximum DBH (so I can figure out DBH classes)
max(live_conifers_burned$dbh_in)#38.3
#largest class will be 35-40 inches
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#WHAT DATA SUBSET WOULD YOU LIKE TO ANALYZE
#all_trees_burned: all individuals sampled in overstory plots. Includes hardwoods > 4.5 ft tall and dead trees.
#live_trees_burned: all live individuals sampled in overstory plots. Includes hardwoods > 4.5 ft tall.
#live_conifers_burned: all conifers sampled in overstory plots.
#abgr: all grand fir trees (> 4.5 ft tall) sampled in overstory plots
#laoc: all western larch trees (> 4.5 ft tall) sampled in overstory plots
#pico: all lodgepole pine trees (> 4.5 ft tall) sampled in overstory plots
#pipo: all ponderosa pine trees (> 4.5 ft tall) sampled in overstory plots
#psme: all Douglas-fir trees (> 4.5 ft tall) sampled in overstory plots
trees_burned <- live_conifers_burned
#Add column to data showing expansion factor
unitID_burned_individual <- mapply(function(y)
{
unitID_burned[pre_seID_burned_sites == trees_burned$unitSamplingEpisodeID[y]]
}, 1:length(trees_burned[,1]))
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Intermittant step. Run this no matter what you want to analyze.
#Figure out try TPA by 5 inch DBH classes from 0-5 to 35-40.
#Create data frame to accept tree count data by plot for each site
tree_density_template <- data.frame(plot_lut[plot_lut$unitID %in% unitID_burned &
plot_lut$plotID %in% sort(unique(trees_burned$plotID)),])
###
#0-4.9 inch DBH class
#Subset trees, need to do this twice because DBH class straddles
#nested plot cutoff.
#For 0-2.9"
trees_burned_0_2.9 <- trees_burned[trees_burned$dbh_in < 3,]
#For 3.0-4.9"
trees_burned_3.0_4.9 <- trees_burned[trees_burned$dbh_in >= 3 &
trees_burned$dbh_in <= 4.9,]
#Count the number of trees in each plot
#For 0-2.9"
trees_burned_0_2.9_count <- mapply(function(y) {
length(trees_burned_0_2.9$treeID[trees_burned_0_2.9$plotID == y])
}, tree_density_template$plotID)
#For 3.0-4.9"
trees_burned_3.0_4.9_count <- mapply(function(y) {
length(trees_burned_3.0_4.9$treeID[trees_burned_3.0_4.9$plotID == y])
}, tree_density_template$plotID)
###
#5.0-9.9 inch DBH class
#Subset trees.
trees_burned_5.0_9.9 <- trees_burned[trees_burned$dbh_in >= 5 &
trees_burned$dbh_in <= 9.9,]
#Count the number of trees in each plot
#For 5.0-9.9"
trees_burned_5.0_9.9_count <- mapply(function(y) {
length(trees_burned_5.0_9.9$treeID[trees_burned_5.0_9.9$plotID == y])
}, tree_density_template$plotID)
###
#10.0-14.9 inch DBH class
#Subset trees.
trees_burned_10.0_14.9 <- trees_burned[trees_burned$dbh_in >= 10 &
trees_burned$dbh_in <= 14.9,]
#Count the number of trees in each plot
trees_burned_10.0_14.9_count <- mapply(function(y) {
length(trees_burned_10.0_14.9$treeID[trees_burned_10.0_14.9$plotID == y])
}, tree_density_template$plotID)
###
#15.0-19.9 inch DBH class
#Subset trees.
trees_burned_15.0_19.9 <- trees_burned[trees_burned$dbh_in >= 15 &
trees_burned$dbh_in <= 19.9,]
#Count the number of trees in each plot
trees_burned_15.0_19.9_count <- mapply(function(y) {
length(trees_burned_15.0_19.9$treeID[trees_burned_15.0_19.9$plotID == y])
}, tree_density_template$plotID)
###
#20.0-24.9 inch DBH class
#Subset trees.
trees_burned_20.0_23.9 <- trees_burned[trees_burned$dbh_in >= 20 &
trees_burned$dbh_in <= 23.9,]
trees_burned_24.0_24.9 <- trees_burned[trees_burned$dbh_in >= 24 &
trees_burned$dbh_in <= 24.9,]
#Count the number of trees in each plot
trees_burned_20.0_23.9_count <- mapply(function(y) {
length(trees_burned_20.0_23.9$treeID[trees_burned_20.0_23.9$plotID == y])
}, tree_density_template$plotID)
trees_burned_24.0_24.9_count <- mapply(function(y) {
length(trees_burned_24.0_24.9$treeID[trees_burned_24.0_24.9$plotID == y])
}, tree_density_template$plotID)
###
#25.0-29.9 inch DBH class
#Subset trees.
trees_burned_25.0_29.9 <- trees_burned[trees_burned$dbh_in >= 25 &
trees_burned$dbh_in <= 29.9,]
#Count the number of trees in each plot
trees_burned_25.0_29.9_count <- mapply(function(y) {
length(trees_burned_25.0_29.9$treeID[trees_burned_25.0_29.9$plotID == y])
}, tree_density_template$plotID)
###
#30.0-34.9 inch DBH class
#Subset trees.
trees_burned_30.0_34.9 <- trees_burned[trees_burned$dbh_in >= 30 &
trees_burned$dbh_in <= 34.9,]
#Count the number of trees in each plot
trees_burned_30.0_34.9_count <- mapply(function(y) {
length(trees_burned_30.0_34.9$treeID[trees_burned_30.0_34.9$plotID == y])
}, tree_density_template$plotID)
###
#35.0-39.9 inch DBH class
#Subset trees.
trees_burned_35.0_39.9 <- trees_burned[trees_burned$dbh_in >= 35 &
trees_burned$dbh_in <= 39.9,]
#Count the number of trees in each plot
trees_burned_35.0_39.9_count <- mapply(function(y) {
length(trees_burned_35.0_39.9$treeID[trees_burned_35.0_39.9$plotID == y])
}, tree_density_template$plotID)
#Combine tree count data into a single data frame.
tree_count_plot <- data.frame(tree_density_template,
count_0_2.9 = trees_burned_0_2.9_count,
count_3.0_4.9 = trees_burned_3.0_4.9_count,
count_5.0_9.9 = trees_burned_5.0_9.9_count,
count_10.0_14.9 = trees_burned_10.0_14.9_count,
count_15.0_19.9 = trees_burned_15.0_19.9_count,
count_20.0_23.9 = trees_burned_20.0_23.9_count,
count_24.0_24.9 = trees_burned_24.0_24.9_count,
count_25.0_29.9 = trees_burned_25.0_29.9_count,
count_30.0_34.9 = trees_burned_30.0_34.9_count,
count_35.0_39.9 = trees_burned_35.0_39.9_count)
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#NEXT STEPS CALCULATE SITE-LEVEL VARIABLES
#DATA IS REPORTED FOR ALL TREES
#I.E. OVERSTORY IS NOT STRATIFIED BY DBH CLASS OR OVERSTORY POSITION
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Calculate TPA by site
#Condense tree count data to nested plot dimensions
tree_count_plot_3.0_23.9 <- tree_count_plot[,6] + tree_count_plot[,7] +
tree_count_plot[,8] + tree_count_plot[,9] + tree_count_plot[,10]
tree_count_plot_24.0_39.9 <- tree_count_plot[,11] + tree_count_plot[,12] +
tree_count_plot[,13] + tree_count_plot[,14]
tree_count_plot_condensed <- data.frame(tree_count_plot[,1:5],
count_3.0_23.9 = tree_count_plot_3.0_23.9,
count_24.0_39.9 = tree_count_plot_24.0_39.9)
#Create a table that reference columns in the density conversion factor table.
conversion_factors_col_reference <- c(5, 6, 7)
#Apply conversion factors to calculate TPA for each plot and diameter class
tree_TPA_plot_condensed <- mapply(function(x)
{
mapply(function(y)
{
tree_count_plot_condensed[y,4+x] *
(expansion_factor[,conversion_factors_col_reference[x]][
expansion_factor$unitID == tree_count_plot_condensed$unitID[y]])
}, 1:length(tree_count_plot_condensed$unitID))
}, 1:length(conversion_factors_col_reference))
#Create a new data frame
tree_TPA_plot_condensed_df <- data.frame(tree_count_plot_condensed[,1:4], tree_TPA_plot_condensed)
#The convert data frame into a data table. Note sure why, but I can't convert
#tree_count_plot object directly to a data table.
tree_TPA_plot_condensed_dt <- data.table(tree_TPA_plot_condensed_df)
#Create a vector listing column names.
tree_cols_condensed <- c("X1","X2","X3")
#Summarize data by site
tree_TPA_site_mean_condensed <- tree_TPA_plot_condensed_dt[, lapply(.SD, mean, na.rm=TRUE), by=unitID, .SDcols=tree_cols_condensed]
tree_TPA_site_sd_condensed <- tree_TPA_plot_condensed_dt[, lapply(.SD, sd, na.rm=TRUE), by=unitID, .SDcols=tree_cols_condensed]
tree_TPA_site_mean_condensed <- as.data.frame(tree_TPA_site_mean_condensed)
tree_TPA_site_sd_condensed <- as.data.frame(tree_TPA_site_sd_condensed)
tree_TPA_site_mean_condensed[,2:4] <- round(tree_TPA_site_mean_condensed[,2:4],0)
tree_TPA_site_sd_condensed[,2:4] <- round(tree_TPA_site_sd_condensed[,2:4],0)
#Create column names
tree_TPA_dbhClass_condensed <- c("mean_0_2.9", "sd_0_2.9",
"mean_3.0_23.9", "sd_3.0_23.9",
"mean_24.0_39.9", "sd_24.0_39.9")
#Combine means and sds
tpas_condensed <- cbind(as.data.frame(tree_TPA_site_mean_condensed), as.data.frame(tree_TPA_site_sd_condensed)[,-1])
#Re-order means and sds so they are adjacent for each DBH class
tpas_ordered_condensed <- cbind(tpas_condensed[,1:2], tpas_condensed[,5],tpas_condensed[,3],
tpas_condensed[,6],tpas_condensed[,4],tpas_condensed[,7])
#Add column names
colnames(tpas_ordered_condensed) <- c("unitID", tree_TPA_dbhClass_condensed)
#Add site names
siteNames_TPA <- mapply(function(y)
{
site_lut$unitName[site_lut$unitID == y]
}, tpas_ordered_condensed$unitID)
#Add site names
tree_TPAS_site_condensed <- data.frame(siteName = siteNames_TPA,
as.data.frame(tpas_ordered_condensed))
tpa <- data.frame(tree_TPAS_site_condensed,
Total = (tree_TPAS_site_condensed[,3] +
tree_TPAS_site_condensed[,5] +
tree_TPAS_site_condensed[,7]))
tpa_summary <- data.frame(siteName = tree_TPAS_site_condensed[,1],
unitID = tree_TPAS_site_condensed[,2],
saplings = tree_TPAS_site_condensed[,3],
trees = tree_TPAS_site_condensed[,5] + tree_TPAS_site_condensed[,7])
###################################################################################################################
###################################################################################################################
#Calculate basal area by site
#Calculate basal area for each tree
tree_BA <- trees_burned$dbh_in^2 * (3.14159265/(4*144))
#Calculate basal area per acre
tree_BA_perAcre <- (tree_BA * (trees_burned$expansionFactor/trees_burned$n))
#Create a new data frame
tree_BA_perAcre_df <- data.frame(unitID = trees_burned$unitID,
plotID = trees_burned$plotID,
treeTagN0 = trees_burned$treeTagNo,
expansionFactor = trees_burned$expansionFactor,
n = trees_burned$n,
dbh_in = trees_burned$dbh_in,
BA_tree = tree_BA,
BA_perAcre = tree_BA_perAcre)
#The convert data frame into a data table. Note sure why, but I can't convert
#tree_count_plot object directly to a data table.
tree_BA_perAcre_dt <- data.table(tree_BA_perAcre_df)
#Column name to reference in lapply function
name_.SD <- c("unitID", "BA_perAcre")
#Basal area for Orion 2
sum(tree_BA_perAcre_df$BA_perAcre[tree_BA_perAcre_df$unitID == 12])
#Show TPA for Orion 2
Orion2_TPA <- tree_TPA_plot_condensed_df[tree_TPA_plot_condensed_df$unitID == 12,]
sum_OR2 <- apply(Orion2_TPA[,5:7],1,sum)
mean(sum_OR2)
#TPA for all (including dead trees) at Orion 2
#161     163     165     167     169     171     173     175     177     179
#57.250  51.525  62.975 183.200  97.325 332.050 120.225 177.475 194.650 372.125
#Average TPA
#164.88
#Summarize data by plot
tree_BA_perAcre_plot <- tree_BA_perAcre_dt[, lapply(.SD, sum, na.rm=TRUE), by=plotID, .SDcols=name_.SD[2]]
tree_BA_unitID <- tree_BA_perAcre_dt[, lapply(.SD, unique, na.rm=TRUE), by=plotID, .SDcols=name_.SD[1]]
#Create a data table to summarize data by site
plot_BA_perAcre_dt <- data.table(tree_BA_unitID, tree_BA_perAcre_plot)
#Summarize data by site
tree_BA_perAcre_site_mean <- plot_BA_perAcre_dt[, lapply(.SD, mean, na.rm=TRUE), by=unitID, .SDcols=name_.SD[2]]
tree_BA_perAcre_site_sd <- plot_BA_perAcre_dt[, lapply(.SD, sd, na.rm=TRUE), by=unitID, .SDcols=name_.SD[2]]
tree_BA_perAcre_site_mean <- as.data.frame(tree_BA_perAcre_site_mean)
tree_BA_perAcre_site_sd <- as.data.frame(tree_BA_perAcre_site_sd)
tree_BA_perAcre_site_mean[,2] <- round(tree_BA_perAcre_site_mean[,2],2)
tree_BA_perAcre_site_sd[,2] <- round(tree_BA_perAcre_site_sd[,2],2)
#Combine means and sds
BA_condensed <- cbind(as.data.frame(tree_BA_perAcre_site_mean),
as.data.frame(tree_BA_perAcre_site_sd)[,-1])
#Add column names
colnames(BA_condensed) <- c("unitID", "mean_BA_perAcre", "StdDev")
#Add site names
siteNames_BA <- mapply(function(y)
{
site_lut$unitName[site_lut$unitID == y]
}, BA_condensed$unitID)
#Add site names
site_BA_perAcre <- data.frame(siteName = siteNames_BA,
as.data.frame(BA_condensed))
###################################################################################################################
test <- data.frame(unitID = trees_burned$unitID, dbh = trees_burned$dbh_in, ba_tree = tree_BA,
ef = trees_burned$expansionFactor, ef10 = trees_burned$expansionFactor/10,
ba_acre = tree_BA*(trees_burned$expansionFactor/10))
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Calculate measured crown volume scorched for by site
#Calculate values for each tree multiplied by the expansion factor. Intermittent step for calculating
#weighted mean.
expansion_value_CVS <- trees_burned$crownScorch * trees_burned$expansionFactor
#Create a new data frame
tree_CVS_df <- data.frame(unitID = unitID_burned_individual,
plotID = trees_burned$plotID,
treeTagN0 = trees_burned$treeTagNo,
crownScorch = trees_burned$crownScorch,
ExpansionValue = expansion_value_CVS,
ExpansionFactor = trees_burned$expansionFactor)
#The convert data frame into a data table. Note sure why, but I can't convert
#tree_count_plot object directly to a data table.
tree_CVS_dt <- data.table(tree_CVS_df)
#Column name to reference in lapply function
nameCVS_.SD <- c("unitID", "crownScorch", "ExpansionValue", "ExpansionFactor")
######################################################################################################################
#Uses weighted means to adjust for differences in overstory plot size
#NOTE: Only Hanlon and Angel have variable overstory radii and Hanlon has no burned trees.
#Calculate weighted mean crown volume scorched based on plot size.
weighted_sum_CVS_plot <- tree_CVS_dt[, lapply(.SD, sum, na.rm=TRUE), by=plotID, .SDcols=nameCVS_.SD[3]]
weighted_n_CVS_plot <- tree_CVS_dt[, lapply(.SD, sum, na.rm=TRUE), by=plotID, .SDcols=nameCVS_.SD[4]]
weighted_unitID_CVS_plot <- tree_CVS_dt[, lapply(.SD, unique, na.rm=TRUE), by=plotID, .SDcols=nameCVS_.SD[1]]
weighted_mean_CVS_plot <- weighted_sum_CVS_plot$ExpansionValue / weighted_n_CVS_plot$ExpansionFactor
#Create a data table to summarize data by site
plot_weighted_CVS_dt <- data.table(weighted_unitID_CVS_plot, crownScorch = weighted_mean_CVS_plot)
#Summarize data by site
tree_weighted_CVS_site_mean <- plot_weighted_CVS_dt[, lapply(.SD, mean, na.rm=TRUE), by=unitID, .SDcols=nameCVS_.SD[2]]
tree_weighted_CVS_site_sd <- plot_weighted_CVS_dt[, lapply(.SD, sd, na.rm=TRUE), by=unitID, .SDcols=nameCVS_.SD[2]]
tree_weighted_CVS_site_mean <- as.data.frame(tree_weighted_CVS_site_mean)
tree_weighted_CVS_site_sd <- as.data.frame(tree_weighted_CVS_site_sd)
tree_weighted_CVS_site_mean[,2] <- round(tree_weighted_CVS_site_mean[,2],2)
tree_weighted_CVS_site_sd[,2] <- round(tree_weighted_CVS_site_sd[,2],2)
#Combine means and sds
CVS_weighted_condensed <- cbind(as.data.frame(tree_weighted_CVS_site_mean),
as.data.frame(tree_weighted_CVS_site_sd)[,-1])
#Add column names
colnames(CVS_weighted_condensed) <- c("unitID", "mean_crownScorch", "StdDev")
#Add site names
siteNames_weighted_CVS <- mapply(function(y)
{
site_lut$unitName[site_lut$unitID == y]
}, CVS_weighted_condensed$unitID)
site_weighted_CVS <- data.frame(siteName = siteNames_weighted_CVS,
as.data.frame(CVS_weighted_condensed))
###################################################################################################################
###################################################################################################################
#Calculate bole char by site
#Calculate average bole char =  (min + max)/2
aveBoleChar <- ((trees_burned$minBoleChar_ft + trees_burned$maxBoleChar_ft)/2)
#Calculate values for each tree multiplied by the expansion factor. Intermittent step for calculating
#weighted mean.
expansion_value_aveBoleChar <- aveBoleChar * trees_burned$expansionFactor
#Create a new data frame
tree_boleChar_df <- data.frame(unitID = unitID_burned_individual,
plotID = trees_burned$plotID,
treeTagN0 = trees_burned$treeTagNo,
minBoleChar = trees_burned$minBoleChar_ft,
maxBoleChar = trees_burned$maxBoleChar_ft,
aveBoleChar = aveBoleChar,
ExpansionValue = expansion_value_aveBoleChar,
ExpansionFactor = trees_burned$expansionFactor)
#The convert data frame into a data table. Note sure why, but I can't convert
#tree_count_plot object directly to a data table.
tree_boleChar_dt <- data.table(tree_boleChar_df)
#Column name to reference in lapply function
nameChar_.SD <- c("unitID", "aveBoleChar", "ExpansionValue", "ExpansionFactor")
######################################################################################################################
#Uses weighted means to adjust for differences in overstory plot size
#NOTE: Only Hanlon and Angel have variable overstory radii and Hanlon has no burned trees.
#Calculate weighted mean crown volume scorched based on plot size.
weighted_sum_boleChar_plot <- tree_boleChar_dt[, lapply(.SD, sum, na.rm=TRUE), by=plotID, .SDcols=nameChar_.SD[3]]
weighted_n_boleChar_plot <- tree_boleChar_dt[, lapply(.SD, sum, na.rm=TRUE), by=plotID, .SDcols=nameChar_.SD[4]]
weighted_unitID_boleChar_plot <- tree_boleChar_dt[, lapply(.SD, unique, na.rm=TRUE), by=plotID, .SDcols=nameChar_.SD[1]]
weighted_mean_boleChar_plot <- weighted_sum_boleChar_plot$ExpansionValue / weighted_n_boleChar_plot$ExpansionFactor
#Create a data table to summarize data by site
plot_weighted_boleChar_dt <- data.table(weighted_unitID_boleChar_plot, aveBoleChar = weighted_mean_boleChar_plot)
#Summarize data by site
tree_weighted_boleChar_site_mean <- plot_weighted_boleChar_dt[, lapply(.SD, mean, na.rm=TRUE), by=unitID, .SDcols=nameChar_.SD[2]]
tree_weighted_boleChar_site_sd <- plot_weighted_boleChar_dt[, lapply(.SD, sd, na.rm=TRUE), by=unitID, .SDcols=nameChar_.SD[2]]
tree_weighted_boleChar_site_mean <- as.data.frame(tree_weighted_boleChar_site_mean)
tree_weighted_boleChar_site_sd <- as.data.frame(tree_weighted_boleChar_site_sd)
tree_weighted_boleChar_site_mean[,2] <- round(tree_weighted_boleChar_site_mean[,2],2)
tree_weighted_boleChar_site_sd[,2] <- round(tree_weighted_boleChar_site_sd[,2],2)
#Combine means and sds
boleChar_weighted_condensed <- cbind(as.data.frame(tree_weighted_boleChar_site_mean),
as.data.frame(tree_weighted_boleChar_site_sd)[,-1])
#Add column names
colnames(boleChar_weighted_condensed) <- c("unitID", "mean_crownScorch", "StdDev")
#Add site names
siteNames_weighted_boleChar <- mapply(function(y)
{
site_lut$unitName[site_lut$unitID == y]
}, boleChar_weighted_condensed$unitID)
site_weighted_boleChar <- data.frame(siteName = siteNames_weighted_boleChar,
as.data.frame(boleChar_weighted_condensed))
site_weighted_boleChar
boleChar_weighted_condensed
tree_weighted_boleChar_site_mean
head(diam_Class_pre)
head(diam_Class_pre)
head(tree_weighted_boleChar_site_mean)
tree_weighted_boleChar_site_mean
head(weighted_mean_boleChar_plot)
head(tree_boleChar_df)
#PURPOSE OF THIS SCRIPT IS TO SUMMARIZE FOFEM OUTPUTS FOR TEXT IN JULY 30, 2017 REPORT.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(plyr)
library(data.table)
setwd("C:/Users/jcronan/Documents/GitHub/Forest_Resiliency_Burning_Pilot")
#Open file with tree species metadata:
fofem <- read.table("wad_20170730_FOFEM_outputs.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Subset data by diamater class
diamClass_summary <- ddply(fofem, c("site_no", "measure"), summarise,
sum_0_2 = sum(diam_0_2, na.rm = T),
sum_2_4 = sum(diam_2_4, na.rm = T),
sum_4_6 = sum(diam_4_6, na.rm = T),
sum_6_8 = sum(diam_6_8, na.rm = T),
sum_8_10 = sum(diam_8_10, na.rm = T),
sum_10_12 = sum(diam_10_12, na.rm = T),
sum_12_14 = sum(diam_12_14, na.rm = T),
sum_14_26 = sum(diam_14_16, na.rm = T),
sum_16_28 = sum(diam_16_18, na.rm = T),
sum_18_20 = sum(diam_18_20, na.rm = T),
sum_20_22 = sum(diam_20_22, na.rm = T),
sum_22_24 = sum(diam_22_24, na.rm = T),
sum_24_26 = sum(diam_24_26, na.rm = T),
sum_26_28 = sum(diam_26_28, na.rm = T),
sum_28_30 = sum(diam_28_30, na.rm = T),
sum_30_32 = sum(diam_30_32, na.rm = T),
sum_32_34 = sum(diam_32_34, na.rm = T),
sum_34_36 = sum(diam_34_36, na.rm = T),
sum_36_38 = sum(diam_36_38, na.rm = T),
sum_38_40 = sum(diam_38_40, na.rm = T))
head(fofem)
